setwd("C:/Users/svillatoro/Desktop/Better Data Science/Week 12 - Regular Expressions")
text.data <- c("data science",
"public policy",
"social policy",
"Fels Mansion",
"UPenn",
"Pennsylvania",
"policy",
"data",
"science",
"19104",
"3814 Walnut St",
"Philadelphia, PA",
"Philly",
"Phil",
"Phila",
"Natalie",
"number 1",
"19104-6286",
"19081-1731",
"(215)746-5555",
"215-746-5555",
"2157465555")
grep("a", text.data)
# value = FALSE will return the index of elements (it is the default)
grep("a", text.data, value = TRUE)
grep("[0123456789]", text.data, value = TRUE)
# The same principle will hold true for letters as well.
# We can use grep with bracket notation, to return any
# string that contains any of the letters inside the
# bracket notation – that is, either the string contains
# a OR the string contains T, OR the string could contain
# both A AND T
grep("[at]", text.data, value = TRUE)
?grep()
grep("[0-9][0-9][0-9]", text.data, value = TRUE)
# I could also make this line of code a little shorter by
# using braces to indicate the number of brackets I want.
grep("[0-9]{3}", text.data, value = TRUE)
# Notice that if I change the condition of 3 numbers found
# together to 6 numbers found together – the only string
# that is returned is the completely un-formatted phone
# number. All other numbers in this list are either shorter,
# OR have some symbol that separates them, in the case of
# phone numbers either a dash or a parenthesis that keep
# the string from meeting this condition.
grep("[0-9]{6}", text.data, value = TRUE)
#
# The same is going to be true for letters.
# Notice that when I put just the letter a inside a bracket
# and then a second bracket with just the letter T, I will
# only return words that contain the letter A
# directly followed by the letter T. Notice here
# that the string containing the word “WALNUT” does
# not appear, because even though there is an A followed
# eventually by a “T” – they are not directly next to
# each other so the word wont meet the condition.
grep("[a][t]", text.data, value = TRUE)
grep("[A-Za-z]", text.data, value = TRUE)
# We could also just refer to the lower case letters in the
# condition argument, but add in the argument “ignore.case equals TRUE”
grep("[a-z]", text.data, value = TRUE, ignore.case = TRUE)
# We could also just refer to the lower case letters in the
# condition argument, but add in the argument “ignore.case equals TRUE”
grep("[a-z]", text.data, value = TRUE, ignore.case = FALSE)
grep("^[0-9]{5}", text.data, value = TRUE)
# We can similarly ask grep to return any string that ends
# with particular characters by using the “dollar sign”
# symbol. In this line, I’m asking for grep to return
# any string that ends with the letter “N”
grep("[n]$", text.data, value = TRUE)
# We can also use the or logical operator – the vertical
# line, as we would in any logical statement inside of
# the condition argument. In this line, we’re asking
# grep to return a string that contains the phrase
# “public policy” or “social policy”
grep("(public|social) policy", text.data, value = TRUE)
grep("Philadelphia", text.data, value = TRUE)
grep("Phil(adelphia)?", text.data, value = TRUE)
# Now, you might be thinking to yourself, but,
# wouldn’t just searching “PHIL” return the
# same strings? Let’s try it.
grep("Phil", text.data, value = TRUE)
grep("\\bPhil\\b", text.data, value = TRUE)
text.data = c(text.data, 'PHIL-89', 'PH-IL')
grep("\\bPhil\\b", text.data, value = TRUE)
text.data <- c(text.data, 'Phil-89', 'Ph-il')
grep("\\bPhil\\b", text.data, value = TRUE)
grep("[0-9]", text.data, value = TRUE)
# Just the zips
grep("\\b[0-9]{5}-[0-9]{4}\\b", text.data, value=TRUE)
# using the question mark to make the 4 digits optional
grep("\\b[0-9]{5}(-[0-9]{4})?\\b", text.data, value=TRUE)
grep("\\([0-9]{3}\\)[0-9]{3}-[0-9]{4}", text.data, value=TRUE)
gsub("[^0-9]", "", text.data)
# We can also quickly remove all of the SPACEs in our
# data by giving gsub just a “space” inside of the condition quotes,
gsub(" ", "", text.data)
# Instead of removing elements, let’s try adding some in. in
# this line, I am asking gsub to find everywhere the letters
# “ST” exist together in my strings and replace them with
# the word “STREET”
gsub("[S][t]\\b", "Street", text.data)
gsub("(Natalie)","Ms. \\1 Smith",text.data)
gsub("(N)(atalie)","Ms. \\1. (\\1\\2) Smith",text.data)
gsub("(N)(atalie)","Ms.\\1.(\\1\\2) Smith",text.data)
gsub("(N)(atalie)","Ms. \\1. (\\1\\2) Smith",text.data)
zip <- grep("\\b[0-9]{5}(-[0-9]{4})?\\b",text.data,value=TRUE)
gsub("([0-9]{5})(-[0-9]{4})","\\1",zip)
grepl("[P][e][n][n]", text.data)
# The regEXPR function is closely related. This function will
# return whether or not a match is present in a string as
# well as how many characters into the string the match
# appears. AND also the length of all of the matches in
# another vector.
regexpr("[P][e][n][n]", text.data)
regexpr("Penn", text.data)
matches <- regexpr("[P][e][n][n]", text.data)
regmatches(text.data, matches)
# A closely related function worth mentioning is GregEXPR.
# This function performs a similar operation to regEXPR,
# however the output is formatted differently.
gregexpr("[P][e][n][n]", text.data)
match <- gregexpr("[P][e][n][n]", text.data)
regmatches(text.data, match)
#-------------------------
# Apply Regex
#-------------------------
#Let's use regular expressions in a dataset
# Read in Clery crime log data from University of Oregon
# and examine the variables
df <- read.csv("clerylog.csv", header = TRUE, sep=",")
View(df)
# Read in Clery crime log data from University of Oregon
# and examine the variables
df <- read.csv("clerylog.csv", header = TRUE, sep=",")
# Problem 1:
# Clean up classifications in the nature variable
# by removing the level of offenses (ie. the numbers 1, 2)
df$Nature <- gsub('[0-9]', '',df$Nature)
# Read in Clery crime log data from University of Oregon
# and examine the variables
df <- read.csv("clerylog.csv", header = TRUE, sep=",")
# Read in Clery crime log data from University of Oregon
# and examine the variables
df <- read.csv("clerylog.csv", header = TRUE, sep=",")
View(df)
# Problem 1:
# Clean up classifications in the nature variable
# by removing the level of offenses (ie. the numbers 1, 2)
df$Nature <- gsub('[0-9]', '',df$Nature)
# Problem 2:
# A. Create a dummy variable that indicates if each row
# is a theft or not.
df$isTheft <- with(df, ifelse(grepl('Theft', Nature) == TRUE, 1,0)
# Problem 2:
# A. Create a dummy variable that indicates if each row
# is a theft or not.
df$isTheft <- with(df, ifelse(grepl('Theft', Nature) == TRUE, 1,0))
# B. Create a dummy variable that indicates if each row is a DUI
df$isDUI <- with(df, ifelse(grepl('DUI', Nature) == TRUE, 1,0))
# C. Create a dummy variable that indicates if each row is a drug offense
df$isDrug <- with(df, ifelse(grepl('Drug', Nature) == TRUE, 1,0))
# C. Create a dummy variable that indicates if each row is a drug offense
df$isDrug <- with(df, ifelse(grepl('Drug | Heroin | Marijuana | Meth', Nature) == TRUE, 1,0))
# C. Create a dummy variable that indicates if each row is a drug offense
df$isDrug <- with(df, ifelse(grepl('(Drug|Heroin|Marijuana|Meth)', Nature) == TRUE, 1,0))
